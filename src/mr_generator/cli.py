#!/usr/bin/env python3
"""
MR Description Generator

–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π merge request
–Ω–∞ –æ—Å–Ω–æ–≤–µ git diff —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.
"""

import argparse
import os
import sys
from typing import Optional
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

from .core.git_helper import GitHelper
from .providers.gigachat_provider import GigaChatProvider
from .providers.deepseek_provider import DeepSeekProvider
from .core.base_provider import LLMProvider


class MRDescriptionGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è Merge Request"""
    
    SUPPORTED_PROVIDERS = {
        'gigachat': GigaChatProvider,
        'deepseek': DeepSeekProvider
    }
    
    def __init__(self, repo_path: str = "."):
        self.git_helper = GitHelper(repo_path)
        self.repo_path = repo_path
    
    def create_provider(self, provider_name: str, api_key: str, **kwargs) -> LLMProvider:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
        if provider_name not in self.SUPPORTED_PROVIDERS:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_name}. "
                           f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(self.SUPPORTED_PROVIDERS.keys())}")
        
        provider_class = self.SUPPORTED_PROVIDERS[provider_name]
        return provider_class(api_key, **kwargs)
    
    def generate_description(
        self,
        branch: str,
        provider_name: str,
        api_key: str,
        base_branch: Optional[str] = None,
        **kwargs
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ MR
        
        Args:
            branch: –ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏
            provider_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (gigachat, deepseek)
            api_key: API –∫–ª—é—á
            base_branch: –ë–∞–∑–æ–≤–∞—è –≤–µ—Ç–∫–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞)
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        if not self.git_helper.is_git_repo():
            raise Exception("–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        repo_info = self.git_helper.get_repo_info()
        print(f"üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_info.get('repo_name', 'Unknown')}")
        print(f"üåø –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {repo_info.get('current_branch', 'Unknown')}")
        
        # –ü–æ–ª—É—á–∞–µ–º diff
        print(f"üîç –ü–æ–ª—É—á–∞–µ–º diff –¥–ª—è –≤–µ—Ç–∫–∏ '{branch}'...")
        diff_content = self.git_helper.get_diff(branch, base_branch)
        
        if not diff_content.strip():
            raise Exception(f"–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≤–µ—Ç–∫–µ '{branch}' –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–∞–∑–æ–≤–æ–π –≤–µ—Ç–∫–∏")
        
        # üß† –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ë–û–õ–¨–®–ò–• DIFF'–û–í
        original_size = len(diff_content)
        print(f"üìè –†–∞–∑–º–µ—Ä diff: {original_size:,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if original_size > 100000:  # –ë–æ–ª—å—à–µ 100–ö —Å–∏–º–≤–æ–ª–æ–≤
            print("üß† Diff —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            diff_content = self._smart_truncate_diff(diff_content, max_size=50000)
            print(f"üìâ –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(diff_content):,} —Å–∏–º–≤–æ–ª–æ–≤")
        elif original_size > 50000:  # –ë–æ–ª—å—à–µ 50–ö —Å–∏–º–≤–æ–ª–æ–≤
            print("‚ö° –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ–≥–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...")
            diff_content = self._smart_truncate_diff(diff_content, max_size=30000)
            print(f"üìâ –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(diff_content):,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        changed_files = self.git_helper.get_changed_files(branch, base_branch)
        commit_messages = self.git_helper.get_commit_messages(branch, base_branch)
        
        print(f"üìÑ –ò–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(changed_files)}")
        print(f"üìù –ö–æ–º–º–∏—Ç–æ–≤: {len(commit_messages)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        provider = self.create_provider(provider_name, api_key, **kwargs)
        print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {provider.get_model_name()}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ kwargs
        kwargs.update({
            'changed_files': changed_files,
            'commit_messages': commit_messages,
            'repo_name': repo_info.get('repo_name', ''),
        })
        
        print("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ...")
        description = provider.generate_description(diff_content, branch, **kwargs)
        
        return description
    
    def _smart_truncate_diff(self, diff_content: str, max_size: int = 50000) -> str:
        """–£–º–Ω–æ –æ–±—Ä–µ–∑–∞–µ—Ç diff, —Å–æ—Ö—Ä–∞–Ω—è—è –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        
        if len(diff_content) <= max_size:
            return diff_content
        
        lines = diff_content.split('\n')
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            'files_changed': 0,
            'additions': 0,
            'deletions': 0,
            'file_types': {}
        }
        
        important_lines = []
        current_file = None
        files_shown = 0
        max_files_to_show = 15  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 —Ñ–∞–π–ª–æ–≤
        
        for line in lines:
            # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
            if line.startswith('diff --git'):
                stats['files_changed'] += 1
                if files_shown < max_files_to_show:
                    important_lines.append(line)
                    current_file = line
                    files_shown += 1
                else:
                    break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            elif line.startswith('index ') or line.startswith('---') or line.startswith('+++'):
                if files_shown <= max_files_to_show:
                    important_lines.append(line)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            elif line.startswith('@@'):
                if files_shown <= max_files_to_show:
                    important_lines.append(line)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ
            elif line.startswith('+') and not line.startswith('+++'):
                stats['additions'] += 1
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                if files_shown <= max_files_to_show and len(important_lines) < max_size // 2:
                    important_lines.append(line)
            
            elif line.startswith('-') and not line.startswith('---'):
                stats['deletions'] += 1
                if files_shown <= max_files_to_show and len(important_lines) < max_size // 2:
                    important_lines.append(line)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–±–µ–∑ + –∏–ª–∏ -)
            elif files_shown <= max_files_to_show and len(important_lines) < max_size // 2:
                if len(line.strip()) > 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    important_lines.append(line)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π diff
        result_lines = [
            f"=== –£–ú–ù–û–ï –†–ï–ó–Æ–ú–ï DIFF'–ê ===",
            f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {len(diff_content):,} —Å–∏–º–≤–æ–ª–æ–≤",
            f"–§–∞–π–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: {stats['files_changed']:,}",
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {stats['additions']:,}",
            f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {stats['deletions']:,}",
            f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {min(files_shown, max_files_to_show)} —Ñ–∞–π–ª–æ–≤ –∏–∑ {stats['files_changed']}",
            "",
            "=== –ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø ===",
            ""
        ]
        
        result_lines.extend(important_lines)
        
        if stats['files_changed'] > max_files_to_show:
            result_lines.extend([
                "",
                f"... –∏ –µ—â–µ {stats['files_changed'] - max_files_to_show} —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞",
                "",
                "[–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–û–ö–†–ê–©–ï–ù–û –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ò–ò]"
            ])
        
        return '\n'.join(result_lines)
    
    def save_description(self, description: str, output_file: Optional[str] = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        if output_file:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É generated, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            generated_dir = Path("generated")
            generated_dir.mkdir(exist_ok=True)
            
            # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å generated/, –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É
            output_path = Path(output_file)
            if not output_path.is_absolute() and not str(output_path).startswith("generated/"):
                output_path = generated_dir / output_path
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(description)
            print(f"üíæ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_path}")
        else:
            print("\n" + "="*50)
            print("üìã –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–û–ï –û–ü–ò–°–ê–ù–ò–ï MR:")
            print("="*50)
            print(description)
            print("="*50)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏–π Merge Request –Ω–∞ –æ—Å–Ω–æ–≤–µ git diff",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏ —Å –ø–æ–º–æ—â—å—é GigaChat
  python mr_generator.py --provider gigachat --repo-path /path/to/your/repo --api-key YOUR_KEY

  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ç–∫–∏ —Å –ø–æ–º–æ—â—å—é DeepSeek
  python mr_generator.py --branch feature/new-api --provider deepseek --repo-path /path/to/your/repo --api-key YOUR_KEY

  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
  python mr_generator.py --provider gigachat --repo-path /path/to/your/repo --api-key YOUR_KEY --output description.md

  # –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  python mr_generator.py --provider deepseek --repo-path /path/to/your/repo --api-key YOUR_KEY --language en --prompt-type concise

  # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  python mr_generator.py --provider gigachat --repo-path /path/to/your/repo --api-key YOUR_KEY --prompt-type concise

  # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
  python mr_generator.py --provider gigachat --repo-path /path/to/your/repo --api-key YOUR_KEY --language en --prompt-type detailed

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  GIGACHAT_API_KEY  - API –∫–ª—é—á –¥–ª—è GigaChat
  DEEPSEEK_API_KEY  - API –∫–ª—é—á –¥–ª—è DeepSeek
        """
    )
    
    parser.add_argument(
        '--branch', '-b',
        help='–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞)',
        default=None
    )
    
    parser.add_argument(
        '--base-branch',
        help='–ë–∞–∑–æ–≤–∞—è –≤–µ—Ç–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)',
        default=None
    )
    
    parser.add_argument(
        '--provider', '-p',
        choices=['gigachat', 'deepseek'],
        required=True,
        help='–ü—Ä–æ–≤–∞–π–¥–µ—Ä —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏'
    )
    
    parser.add_argument(
        '--api-key', '-k',
        help='API –∫–ª—é—á (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)'
    )
    
    parser.add_argument(
        '--output', '-o',
        help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è'
    )
    
    parser.add_argument(
        '--language', '-l',
        choices=['ru', 'en'],
        default='ru',
        help='–Ø–∑—ã–∫ –æ–ø–∏—Å–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π)'
    )
    
    parser.add_argument(
        '--prompt-type', '-t',
        choices=['basic', 'detailed', 'concise'],
        default='detailed',
        help='–¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞: basic (–ø—Ä–æ—Å—Ç–æ–π), detailed (–ø–æ–¥—Ä–æ–±–Ω—ã–π), concise (–∫—Ä–∞—Ç–∫–∏–π)'
    )
    
    parser.add_argument(
        '--no-technical',
        action='store_true',
        help='–ò—Å–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏'
    )
    
    parser.add_argument(
        '--temperature',
        type=float,
        default=0.7,
        help='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏ (0.0 - 1.0)'
    )
    
    parser.add_argument(
        '--max-tokens',
        type=int,
        default=1000,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ'
    )
    
    parser.add_argument(
        '--repo-path', '-r',
        required=True,
        help='–ü—É—Ç—å –∫ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é'
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤'
    )
    
    args = parser.parse_args()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        api_key = args.api_key
        if not api_key:
            env_key = f"{args.provider.upper()}_API_KEY"
            api_key = os.getenv(env_key)
            if not api_key:
                print(f"‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                      f"–£–∫–∞–∂–∏—Ç–µ --api-key –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è {env_key}")
                sys.exit(1)
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = MRDescriptionGenerator(args.repo_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ç–∫—É
        branch = args.branch
        if not branch:
            branch = generator.git_helper.get_current_branch()
            print(f"üåø –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É: {branch}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        kwargs = {
            'language': args.language,
            'prompt_type': args.prompt_type,
            'include_technical': not args.no_technical,
            'temperature': args.temperature,
            'max_tokens': args.max_tokens
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º dry-run —Ä–µ–∂–∏–º
        if args.dry_run:
            print("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (dry-run)")
            print("=" * 50)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            base_branch = args.base_branch or generator.git_helper.get_base_branch(branch)
            diff_content = generator.git_helper.get_diff(branch, base_branch)
            
            print(f"üìä –í–µ—Ç–∫–∞: {branch}")
            print(f"üìä –ë–∞–∑–æ–≤–∞—è –≤–µ—Ç–∫–∞: {base_branch}")
            print(f"üìä –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {args.provider}")
            print(f"üìä –Ø–∑—ã–∫: {args.language}")
            print(f"üìä –¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞: {args.prompt_type}")
            print(f"üìä –†–∞–∑–º–µ—Ä diff: {len(diff_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {kwargs}")
            
            if diff_content.strip():
                print("\nüìã –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ diff:")
                print("-" * 50)
                print(diff_content[:500])
                if len(diff_content) > 500:
                    print("...")
                print("-" * 50)
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                mock_description = f"""## –°–≤–æ–¥–∫–∞
–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ MR –¥–ª—è –≤–µ—Ç–∫–∏ {branch}

## –ò–∑–º–µ–Ω–µ–Ω–∏—è  
- –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ {len(diff_content)} —Å–∏–º–≤–æ–ª–æ–≤
- –ë–∞–∑–æ–≤–∞—è –≤–µ—Ç–∫–∞: {base_branch}
- –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {args.provider}

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–º–µ—Ç–∫–∏
–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ dry-run —Ä–µ–∂–∏–º–µ.
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ —Ñ–ª–∞–≥–∞ --dry-run.

*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {kwargs}*"""
                
                generator.save_description(mock_description, args.output)
                print("\n‚úÖ Dry-run –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ö†Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –≤–µ—Ç–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = generator.generate_description(
            branch=branch,
            provider_name=args.provider,
            api_key=api_key,
            base_branch=args.base_branch,
            **kwargs
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        generator.save_description(description, args.output)
        
        print("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
