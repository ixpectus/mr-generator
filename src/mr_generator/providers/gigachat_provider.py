"""
–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è GigaChat API
"""

import json
import requests
import uuid
from typing import Dict, Any
from ..core.base_provider import LLMProvider


class GigaChatProvider(LLMProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat API"""
    
    def __init__(self, api_key: str, **kwargs):
        super().__init__(api_key, **kwargs)
        self.base_url = kwargs.get('base_url', 'https://gigachat.devices.sberbank.ru/api/v1')
        self.model = kwargs.get('model', 'GigaChat')
        self.temperature = kwargs.get('temperature', 0.7)
        self.access_token = None
    
    def _get_access_token(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç access token –¥–ª—è GigaChat"""
        if self.access_token:
            return self.access_token
            
        # –ù–æ–≤—ã–π URL —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        auth_url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
        
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json',
            'RqUID': str(uuid.uuid4()),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
            'Authorization': f'Basic {self.api_key}'
        }
        
        data = {'scope': 'GIGACHAT_API_PERS'}
        
        try:
            response = requests.post(auth_url, headers=headers, data=data, verify=False, timeout=30)
            response.raise_for_status()
            token_data = response.json()
            self.access_token = token_data['access_token']
            return self.access_token
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ GigaChat: {e}")
    
    def generate_description(self, diff_content: str, branch_name: str, **kwargs) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ MR —Å –ø–æ–º–æ—â—å—é GigaChat"""
        
        prompt = self._build_prompt(diff_content, branch_name, **kwargs)
        
        url = f"{self.base_url}/chat/completions"
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': f'Bearer {self._get_access_token()}'
        }
        
        payload = {
            'model': self.model,
            'messages': [
                {
                    'role': 'user',
                    'content': prompt
                }
            ],
            'temperature': self.temperature,
            'max_tokens': kwargs.get('max_tokens', 1000)
        }
        
        try:
            response = requests.post(url, headers=headers, json=payload, verify=False)
            response.raise_for_status()
            result = response.json()
            return result['choices'][0]['message']['content'].strip()
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å GigaChat: {e}")
    
    def _build_prompt(self, diff_content: str, branch_name: str, **kwargs) -> str:
        """–°—Ç—Ä–æ–∏—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è"""
        
        changed_files = kwargs.get('changed_files', [])
        commit_messages = kwargs.get('commit_messages', [])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø MR
        mr_type = self._detect_mr_type(changed_files, commit_messages)
        
        print(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø MR: {mr_type}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        return self._get_specialized_prompt(mr_type, diff_content, branch_name, **kwargs)
        
    def _detect_mr_type(self, changed_files: list, commit_messages: list) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø MR –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–∞–π–ª–∞–º
        has_ci = any(('.github' in f or 'ci' in f.lower() or 'docker' in f.lower() or 
                     'makefile' in f.lower() or '.yml' in f or '.yaml' in f) for f in changed_files)
        has_tests = any(('test' in f.lower() or 'spec' in f.lower()) for f in changed_files)
        has_docs = any(('readme' in f.lower() or '.md' in f.lower()) for f in changed_files)
        has_config = any(('config' in f.lower() or '.json' in f or '.toml' in f or 
                         '.env' in f or 'requirements' in f) for f in changed_files)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–º–º–∏—Ç–∞–º  
        commits_text = ' '.join(commit_messages).lower()
        is_fix = any(word in commits_text for word in ['fix', 'bug', '–∏—Å–ø—Ä–∞–≤', 'bagfix', 'hotfix'])
        is_feat = any(word in commits_text for word in ['feat', 'add', 'new', '–¥–æ–±–∞–≤', 'feature'])
        is_refactor = any(word in commits_text for word in ['refactor', 'clean', '—Ä–µ—Ñ–∞–∫—Ç–æ—Ä', 'restructure'])
        is_docs = any(word in commits_text for word in ['docs', 'documentation', 'readme', '–¥–æ–∫—É–º–µ–Ω—Ç'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
        if has_ci or 'docker' in commits_text or 'deploy' in commits_text:
            return 'infrastructure'
        elif is_fix and not is_feat:
            return 'bugfix'
        elif is_refactor and not is_feat:
            return 'refactor'
        elif has_docs and is_docs and len(changed_files) <= 5:
            return 'docs'
        elif is_feat or 'new' in commits_text:
            return 'feature'
        else:
            return 'default'
    
    def _get_specialized_prompt(self, mr_type: str, diff_content: str, branch_name: str, **kwargs) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ MR"""
        
        language = kwargs.get('language', 'ru')
        prompt_type = kwargs.get('prompt_type', 'detailed')
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ config
        from ..config import PROMPT_TEMPLATES
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á —à–∞–±–ª–æ–Ω–∞
        template_key = f"{prompt_type}_{language}"
        
        if template_key not in PROMPT_TEMPLATES:
            # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —à–∞–±–ª–æ–Ω—É
            template_key = f"basic_{language}"
        
        template = PROMPT_TEMPLATES[template_key]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        changed_files = kwargs.get('changed_files', [])
        commit_messages = kwargs.get('commit_messages', [])
        repo_name = kwargs.get('repo_name', 'Unknown')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
        try:
            return template.format(
                branch_name=branch_name,
                diff_content=diff_content,
                repo_name=repo_name,
                changed_files_count=len(changed_files),
                commits_count=len(commit_messages)
            )
        except KeyError as e:
            # –ï—Å–ª–∏ –≤ —à–∞–±–ª–æ–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            return template.format(
                branch_name=branch_name,
                diff_content=diff_content
            )
    
    def _get_russian_prompt(self, mr_type: str, diff_content: str, branch_name: str, **kwargs) -> str:
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã"""
        
        include_technical = kwargs.get('include_technical', True)
        changed_files = kwargs.get('changed_files', [])
        commit_messages = kwargs.get('commit_messages', [])
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        context_info = []
        if changed_files:
            context_info.append(f"–§–∞–π–ª–æ–≤: {len(changed_files)}")
        if commit_messages:
            context_info.append(f"–ö–æ–º–º–∏—Ç–æ–≤: {len(commit_messages)}")
        
        context = " | ".join(context_info)
        
        if mr_type == 'feature':
            return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –≤–µ—Ç–∫–µ '{branch_name}'.

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–ø–∏—à–∏ –ö–û–ù–ö–†–ï–¢–ù–û –∫–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω
- –ü–µ—Ä–µ—á–∏—Å–ª–∏ –Ω–æ–≤—ã–µ API/–º–µ—Ç–æ–¥—ã/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- –£–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –∫–ª–∞—Å—Å–æ–≤
- –ë–ï–ó –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "—Ä–∞—Å—à–∏—Ä–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"

–§–û–†–ú–ê–¢:
## –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ]

## –ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
[–ù–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã/–º–µ—Ç–æ–¥—ã/—Ñ–∞–π–ª—ã —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º]

{"## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏" if include_technical else ""}
{"[API endpoints, —Å—Ö–µ–º—ã –ë–î, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏]" if include_technical else ""}

## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
[–ö–∞–∫ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª]

Git diff:
```
{diff_content}
```

–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Ñ–∏—á–∏:"""

        elif mr_type == 'bugfix':
            return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–≥–∞ –≤ –≤–µ—Ç–∫–µ '{branch_name}'.

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–ø–∏—à–∏ –ö–û–ù–ö–†–ï–¢–ù–û –∫–∞–∫–æ–π –±–∞–≥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
- –£–∫–∞–∂–∏ —Ñ–∞–π–ª—ã/–º–µ—Ç–æ–¥—ã –≥–¥–µ –±—ã–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞
- –û–±—ä—è—Å–Ω–∏ –∫–∞–∫ –∏–º–µ–Ω–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
- –£–∫–∞–∂–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ side effects

–§–û–†–ú–ê–¢:
## –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞]

## –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ
[–§–∞–π–ª—ã –∏ –º–µ—Ç–æ–¥—ã —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ–∏–∫—Å–æ–≤]

{"## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–∏—á–∏–Ω–∞" if include_technical else ""}
{"[Root cause –∏ –¥–µ—Ç–∞–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è]" if include_technical else ""}

## –ü—Ä–æ–≤–µ—Ä–∫–∞
[–ö–∞–∫ —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –±–∞–≥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω]

Git diff:
```
{diff_content}
```

–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥—Ñ–∏–∫—Å–∞:"""

        elif mr_type == 'refactor':
            return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ –≤ –≤–µ—Ç–∫–µ '{branch_name}'.

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–ø–∏—à–∏ –ö–û–ù–ö–†–ï–¢–ù–û —á—Ç–æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ
- –£–∫–∞–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ü–µ—Ä–µ—á–∏—Å–ª–∏ breaking changes –µ—Å–ª–∏ –µ—Å—Ç—å
- –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑ –ø—Ä–æ "—É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞"

–§–û–†–ú–ê–¢:
## –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã/–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã]

## –£–ª—É—á—à–µ–Ω–∏—è
[–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á–∏—Ç–∞–µ–º–æ—Å—Ç—å, maintainability]

{"## Breaking changes" if include_technical else ""}
{"[–ß—Ç–æ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è API]" if include_technical else ""}

## –ú–∏–≥—Ä–∞—Ü–∏—è
[–ß—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏]

Git diff:
```
{diff_content}
```

–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:"""

        elif mr_type == 'infrastructure':
            return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –≤–µ—Ç–∫–µ '{branch_name}'.

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –û–ø–∏—à–∏ –ö–û–ù–ö–†–ï–¢–ù–´–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ CI/CD/–∫–æ–Ω—Ñ–∏–≥–∞—Ö
- –£–∫–∞–∂–∏ –Ω–æ–≤—ã–µ/–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∏ —Ñ–∞–π–ª—ã
- –û–±—ä—è—Å–Ω–∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ deployment
- –ü–µ—Ä–µ—á–∏—Å–ª–∏ –Ω–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

–§–û–†–ú–ê–¢:
## –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–æ–≤/—Å–∫—Ä–∏–ø—Ç–æ–≤/Docker]

## CI/CD
[–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞–π–ø–ª–∞–π–Ω–∞—Ö/actions]

{"## Deployment" if include_technical else ""}
{"[–í–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è]" if include_technical else ""}

## –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
[–ù–æ–≤—ã–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã/—Å–µ—Ä–≤–∏—Å—ã]

Git diff:
```
{diff_content}
```

–°–æ–∑–¥–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π:"""

        else:  # default
            return self._get_default_russian_prompt(diff_content, branch_name, **kwargs)
    
    def _get_default_russian_prompt(self, diff_content: str, branch_name: str, **kwargs) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π —Ä—É—Å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç"""
        
        include_technical = kwargs.get('include_technical', True)
        changed_files = kwargs.get('changed_files', [])
        commit_messages = kwargs.get('commit_messages', [])
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
        file_types = set()
        for file in changed_files[:20]:
            if '.' in file:
                ext = file.split('.')[-1].lower()
                file_types.add(ext)
        
        context_info = []
        if changed_files:
            context_info.append(f"–§–∞–π–ª–æ–≤: {len(changed_files)}")
        if file_types:
            context_info.append(f"–¢–∏–ø—ã: {', '.join(sorted(file_types))}")
        if commit_messages:
            context_info.append(f"–ö–æ–º–º–∏—Ç–æ–≤: {len(commit_messages)}")
        
        context = " | ".join(context_info)
        
        return f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π git diff –∏–∑ –≤–µ—Ç–∫–∏ '{branch_name}' –∏ —Å–æ–∑–¥–∞–π –ö–û–ù–ö–†–ï–¢–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ merge request.

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã
- –ü–µ—Ä–µ—á–∏—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã/–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã  
- –£–ø–æ–º—è–Ω–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π/–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
- –ë–ï–ó "–≤–æ–¥—ã" —Ç–∏–ø–∞ "–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π", "–Ω–∞–¥–µ–∂–Ω—ã–π", "—É–ª—É—á—à–µ–Ω–Ω—ã–π"
- –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å —Ç–æ–≥–æ, —á—Ç–æ —Å–¥–µ–ª–∞–Ω–æ, –±–µ–∑ "–î–∞–Ω–Ω—ã–π MR –¥–æ–±–∞–≤–ª—è–µ—Ç..."

–§–û–†–ú–ê–¢:
## –ß—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π]

## –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
[–í–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –∫—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π]

{"## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏" if include_technical else ""}
{"[–î–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, breaking changes, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏]" if include_technical else ""}

## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
[–ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å]

Git diff:
```
{diff_content}
```

–°–æ–∑–¥–∞–π –ö–û–ù–ö–†–ï–¢–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ:"""

    def _get_english_prompt(self, mr_type: str, diff_content: str, branch_name: str, **kwargs) -> str:
        """–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã (–±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä—É—Å—Å–∫–∏–º
        return self._get_default_russian_prompt(diff_content, branch_name, **kwargs)
    
    def get_model_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        return f"GigaChat-{self.model}"
